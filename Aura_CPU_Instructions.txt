<===========================>
<===== Project AuR_ASM =====>
<===========================>
| 16bit Architecture for a Virtual CPU Simulator
| using the .Net v4.7 framework.
|
| Features include simple keyboard input and simple output
| to a virtual screen.
| Intended use is for educational purposes to explore,
| learn, and understand: assembly language, assemblers,
| machine code, how CPUs work, and why explorer.exe keeps crashing.


<====================>
<===== Notation =====>
<====================>
| <reg16> -	Any 16-bit register (A, B, C, D)
| <reg_8> -	Any 8-bit register (AL, BL, CL, DL, AH, BH, CH, DH)
| <con16> -	Any 16-bit constant
| <con_8> - Any 8-bit constant
| <memry> -	Value from address in memory

<=====================>
<===== Registers =====>
<=====================>

=== Register Addresses: (16 Registers) ===
0	A
1	B
2	C
3	D
5	
6	
7	
8	
9	
10	Base Pointer (BP)
11	Stack Pointer (SP)
12	Base Call Stack (BS)
13	Call Stack (CS)
14	Control Register (CR)
15	Instruction Pointer (IP)

=== Control Register Flag Bits ===
0	Carry Flag (CF)
1	Zero Flag (ZF)
2	Test Flag (TF)
3	Overflow Flag (OF)
4	Sign Flag (SF)
5	Interrupt Flag (IF)
6	
7	
8	
9	
10	
11	
12	
13	
14	
15	


<===========================>
<===== Instruction Codes ===>
<===========================>
| Using any instruction that doesn't have a function
| will result in the program terminating

=== MISC ===

0	-	HALT
1	-	
2	-	
3	-	
4	-	
5	-	
6	-	
7	-	
8	-	
9	-	
10	-	
11	-	
12	-	
13	-	
14	-	SYS <reg16>
15	-	SYS <con16>
16	-	
17	-	
18	-	
19	-	
20	-	
21	-	
22	-	
23	-	
24	-	
25	-	
26	-	
27	-	
28	-	
29	-	
30	-	
31	-	

=== Logic ===
| Modifies ZF

__	-	AND <reg16>, <reg16>, <reg16>
__	-	AND <reg_8>, <reg_8>, <reg_8>
__	-	AND <reg16>, <con16>, <reg16>
__	-	AND <reg_8>, <con_8>, <reg_8>
__	-	AND <con16>, <con16>, <reg16>
__	-	AND <con_8>, <con_8>, <reg_8>

__	-	OR <reg16>, <reg16>, <reg16>
__	-	OR <reg_8>, <reg_8>, <reg_8>
__	-	OR <reg16>, <con16>, <reg16>
__	-	OR <reg_8>, <con_8>, <reg_8>
__	-	OR <con16>, <con16>, <reg16>
__	-	OR <con_8>, <con_8>, <reg_8>

__	-	XOR <reg16>, <reg16>, <reg16>
__	-	XOR <reg_8>, <reg_8>, <reg_8>
__	-	XOR <reg16>, <con16>, <reg16>
__	-	XOR <reg_8>, <con_8>, <reg_8>
__	-	XOR <con16>, <con16>, <reg16>
__	-	XOR <con_8>, <con_8>, <reg_8>

__	-	NOT <reg16>
__	-	NOT <reg_8>

=== Arithmetic ===
| Modifies CF and ZF

40	-	ADD REG, REG (Result goes into D)
42	-	SUB REG, REG (Result goes into D)
44	-	MUL REG, REG (Result goes into D, Overflow goes into C)
46	-	DIV	REG, REG (D = Quotient, C = Remainder)

=== Memory ===

56	-	MOV REG, REG
57	-	MOV VAL, REG

50	-	INC REG
51	-	DEC REG

52	-	SHL	REG, REG (Result goes into left operand)
53	-	SHL REG, VAL (Result goes into left operand)

54	-	SHR	REG, REG (Result goes into left operand)
55	-	SHR REG, VAL (Result goes into left operand)



58	-	READ ADR, REG

59	-	WRITE REG, ADR
60	-	WRITE VAL, ADR

61	-	PUSH REG
62	-	POP REG

=== Compare ===
| Modifies TF

70 -	TEST REG = REG
71 -	TEST REG = VAL

72 -	TEST REG < REG
73 -	TEST REG < VAL

74 -	TEST REG > REG
75 -	TEST REG > VAL

76 -	TEST REG <= REG
77 -	TEST REG <= VAL

78 -	TEST REG >= REG
79 -	TEST REG >= VAL

=== Jump ===

80	-	JMP REG
81	-	JMP ADR
82	-	JMP VAL

83	-	JT REG
84	-	JT ADR
85	-	JT VAL

86	-	JF REG
87	-	JF ADR
88	-	JF VAL

=== Call ===
| Pushes current position + 1 onto the call stack before
| jumping to specified address

100	-	RET

101	-	CALL REG
102	-	CALL ADR
103	-	CALL VAL


<========================>
<===== System Calls =====>
<========================>
| These are unique to the virtual machine project

Hex	| --------- Name -------------- | - Registers ------------------------- +
---	| ----------------------------- | -- A -- | -- B -- | -- C -- | -- D -- | 
 00	|  0	-	                    |         |         |         |         |
 0A	| 10	-	Enable/Disable Scrn |    Bool |         |         |         |
 0B	| 11	-	Reset Scrn          |    Bool |         |         |         |
 0C	| 12	-	Input               | KeyCode |         |         |         |
 1A	| 26	-	Set Pixel           |       X |       Y |    Bool |         |
 1B	| 27	-	Print Char          |       X |       Y |     ICS |         |


<======================>
<===== References =====>
<======================>

General Information
	https://en.wikipedia.org/wiki/Assembly_language
	http://boccelliengineering.altervista.org/junk/asm/assembly1.html
	http://www.cs.virginia.edu/~evans/cs216/guides/x86.html

Simple 8-bit Assembler Simulator
	https://schweigi.github.io/assembler-simulator/
	https://schweigi.github.io/assembler-simulator/instruction-set.html

Registers
	https://www.tutorialspoint.com/assembly_programming/assembly_registers.htm
	https://en.wikipedia.org/wiki/Status_register
	https://en.wikipedia.org/wiki/Control_register

Syscalls
	https://en.wikibooks.org/wiki/X86_Assembly/Interfacing_with_Linux
	https://www.tutorialspoint.com/assembly_programming/assembly_system_calls.htm
	https://syscalls.kernelgrok.com/
	https://en.wikipedia.org/wiki/Write_(system_call)


<=================>
<===== Other =====>
<=================>

https://codeshare.io/aJy4QR